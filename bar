#!/usr/bin/env python3

import subprocess
import time

from io import TextIOWrapper
from datetime import datetime

TEMP_HWMON = "/sys/devices/platform/coretemp.0/hwmon/hwmon3/temp1_input"
PREFIX = "["
POSTFIX = "]"

class Widget:    
    def __init__(self):
        self.internal_prefix = ""
        self.internal_postfix = ""

    def __del__(self):
        pass

    def update(self):
        pass

    def display(self) -> str:
        return f"{PREFIX}{self.internal_prefix}{self.__repr__()}{self.internal_postfix}{POSTFIX}"    
    
    def __repr__(self) -> str:
        return ""

class CpuTemp(Widget):
    file: TextIOWrapper

    def __init__(self):
        super().__init__()
        self.file = open(TEMP_HWMON, "r")
        self.internal_prefix = "T "
        self.internal_postfix = "Â°C"

    def __del__(self):
        self.file.close()

    def __repr__(self) -> str:
        temp_f = self.file.read()
        self.file.seek(0)
        temp = int(temp_f) // 1000
        return str(temp)

        
class Memory(Widget):
    file: TextIOWrapper

    def __init__(self):
        super().__init__()
        self.file = open("/proc/meminfo", "r")
        self.internal_prefix = "M "
        self.internal_postfix = "%"

    def __del__(self):
        self.file.close()

    def decode(self) -> dict[str, int]:
        file = self.file.read()
        self.file.seek(0)
        file_split = file.split('\n')

        res: dict[str, int] = {}
        for s in file_split:
            s_split = s.split(':')
            if s_split[0] == '':
                break   

            key = s_split[0].strip()
            value = s_split[1].strip()
            res[str(key)] = int(value[:-3]) if value[:-3] != '' else int(value)
        return res
    
    def __repr__(self) -> str:
        mem_info = self.decode()
        total = mem_info["MemTotal"]
        used = total - mem_info["MemAvailable"]
        percent = int(used*100/total)
        return str(percent)

class Volume(Widget):
    def __init__(self):
        super().__init__()
        self.internal_prefix = "V "

    def __repr__(self) -> str:
        return subprocess.check_output(["pamixer", "--get-volume-human"], text=True).strip()

class Cpu(Widget):
    def __init__(self):
        super().__init__()
        self.internal_prefix = "C "

    def __repr__(self) -> str:
        return subprocess.check_output("top -bn1 | grep Cpu | awk '{print $2}'", shell=True, text=True).strip()

class Time(Widget):
    def __init__(self):
        super().__init__()

    def __repr__(self) -> str:
        return datetime.now().strftime("%H:%M:%S")

class Date(Widget):
    def __repr__(self) -> str:
        return datetime.now().strftime("%A, %d %B")

WIDGETS = [Volume(), Cpu(), CpuTemp(), Memory(), Date(), Time()]
while True:
    buf = ""
    for i, widget in enumerate(WIDGETS):
        buf += widget.display()
        if i != len(WIDGETS)-1:
            buf += " "
    subprocess.run(["xsetroot", "-name", buf])
    time.sleep(1)
